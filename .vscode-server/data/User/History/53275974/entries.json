{"version":1,"resource":"vscode-remote://ssh-remote%2B10.194.32.166/home/log430/app.py","entries":[{"id":"xBft.py","source":"Chat Edit: 'Laboratoire 0 - Infrastructure - Docker, Kubernetes, Version Control, CD/CI\n\nCours : Architecture Logicielle (LOG430)\nSession : Été 2025\nDate du laboratoire : Semaine du 12 mai 2025\n\nType de laboratoire\nPréparatoire\n\n1. Contexte\nDans tout projet logiciel structuré, la capacité à travailler dans un environnement reproductible, automatisé et bien organisé est essentielle. Avant de s’engager dans l’étude des styles architecturaux et des principes de conception, il est important d’établir un socle technique fiable pour expérimenter ces concepts.\n\nCe laboratoire introductif vous invite à créer un environnement de développement conteneurisé, versionné et testé automatiquement en utilisant les outils de votre choix. Ce socle sera réutilisé et enrichi dans les laboratoires suivants, lors de l’implémentation d’architectures logicielles plus complexes.\n\nImportant : Ce laboratoire fait partie de l’Étape 1 de l’évaluation, en combinaison avec les laboratoires 1 et 2. Il est donc évalué, et les livrables produits feront partie du livrable final attendu à la fin de l’Étape 1.\n\n2. Objectifs d’apprentissage\nÀ l’issue de ce laboratoire, vous serez capable de :\n\nStructurer un dépôt de projet dans un gestionnaire de code source (GitLab ou GitHub)\n\nMettre en place des tests unitaires automatisés\n\nConteneuriser l’application avec Docker\n\nAutomatiser les étapes de vérification, test et build avec une pipeline CI/CD\n\n3. Pré-requis\nAvant de commencer, assurez-vous de disposer de :\n\nUn compte personnel sur GitLab ou GitHub\n\nUn éditeur de code (VSCode recommandé)\n\nLes outils suivants installés sur votre machine virtuelle :\n\nGit\n\nDocker\n\nUn framework de test adapté à votre langage (ex : pytest, JUnit, Jest)\n\nAccès aux machines virtuelles\nChaque étudiant recevra un accès individuel à une machine virtuelle dédiée pour réaliser les travaux pratiques de ce laboratoire. Ces machines sont préconfigurées avec les outils nécessaires (Docker, Git, etc.).\n\nLes identifiants de connexion (adresse IP, nom d’utilisateur, mot de passe) seront communiqués sur le serveur Discord du cours.\n\nIl est de votre responsabilité de tester votre accès avant la séance de laboratoire.\n\nEn cas de problème, veuillez contacter rapidement le chargé de laboratoire.\n\n4. Contenu du laboratoire\n4.1. Création et structuration du dépôt\nCréez un dépôt privé nommé sur GitLab ou GitHub.\n\nAjoutez un fichier README.md contenant :\n\nUne brève description de l’application\n\nLes instructions d’exécution\n\nLa structure du projet\n\nAjoutez un fichier .gitignore adapté à votre environnement.\n\n4.2. Développement d’une application minimale\nCréer une application simple (ex. \"Hello World\") dans le langage de votre choix (Python, Java, JavaScript, etc.). L'application peut simplement afficher un message dans la console.\n\n4.3. Tests unitaires automatisés\nRédigez au moins deux tests unitaires.\n\nUtilisez un framework adapté (ex. pytest, JUnit, Jest).\n\n4.4. Conteneurisation de l’application\nCréez une image Docker pour votre application.\n\nVérifiez que l’application fonctionne dans un conteneur local.\n\n4.5. Orchestration avec Docker Compose\nUtilisez Docker Compose pour lancer votre application.\n\nAlternatives possibles : Podman, containerd.\n\n4.6. Intégration continue (CI/CD)\nConfigurez une pipeline CI/CD avec GitLab CI/CD ou GitHub Actions exécutée à chaque push ou merge request. Elle doit inclure :\n\nLint – Vérification syntaxique et stylistique (ex. pylint, eslint).\n\nTests unitaires – Vérification des fonctionnalités.\n\nBuild – Construction de l’image Docker.\n\nPublication – Déploiement de l’image sur Docker Hub (format recommandé : docker.io/username/nom-image:tag).\n\nRemarque : Favorisez les images Docker légères (ex. python:3.11-slim, alpine), utilisez .dockerignore, nettoyez les caches après installation.\n\n5. Conseils\nCommencez avec une structure simple.\n\nTravaillez en local avant de pousser sur Git.\n\nUtilisez des branches et messages de commit clairs.\n\nDocumentez tout dans le README.md.\n\n6. Livrables\nUn rapport PDF à remettre sur Moodle.\n\nLe repo GitHub ou GitLab doit être public.\n\nLe dépôt doit inclure un README.md contenant :\n\nPrésentation de l’architecture et de la structure du projet\n\nInstructions pour :\n\nCloner le projet et se placer dans le bon répertoire\n\nConstruire et lancer avec Docker Compose\n\nUne capture d’écran (ou lien) d’une exécution réussie de la pipeline CI/CD\n\n7. Ressources utiles\nDocker – Getting Started\n\nGitHub Actions – Quickstart\n\nGitLab CI/CD – Guide\n\nGuide des tests unitaires'","timestamp":1747826833435}]}